(function(a){'use strict';a.ScrollToggle=class a{constructor(a){console.log("ScrollToggle: Initialization started with options:",a),this.options=a,this.handleEvent=this.handleEvent.bind(this),this.debounceTimeout=null,this.debounceDelay=50,this.checkInterval=200,this.maxCheckDuration=1e3,document.addEventListener("DOMContentLoaded",()=>{console.log("ScrollToggle: DOMContentLoaded triggered. Initializing..."),this.init(),this.observeMutations()})}init(){console.log(`ScrollToggle: Initializing Event Listener for '${this.options.checkEvent}' event.`);const{checkEvent:a,hoverTriggers:b=[],triggerElements:c=[],conditionElements:d=[],conditionArray:e=[]}=this.options;switch(this.checkEvent=a,this.hoverTriggers=b,this.triggerElements=c.map(a=>{const b=document.getElementById(a);return console.log(`ScrollToggle: Trigger element with ID '${a}' found:`,b),b}),this.conditionElements=d.map(a=>{const b=document.getElementById(a);return console.log(`ScrollToggle: Condition element with ID '${a}' found:`,b),b}),this.conditionArray=e,this.checkEvent){case"scroll":window.addEventListener("scroll",this.handleEvent),console.log("ScrollToggle: Scroll event listener added.");break;case"click":document.addEventListener("click",this.handleEvent),console.log("ScrollToggle: Click event listener added.");break;case"hover":this.hoverTriggers.forEach(a=>{const b=document.getElementsByClassName(a);console.log(`ScrollToggle: Adding hover event listeners for class '${a}'. Number of elements: ${b.length}`),Array.from(b).forEach(a=>{a.addEventListener("mouseenter",this.handleEvent),a.addEventListener("mouseleave",this.handleEvent),console.log(`ScrollToggle: Hover event listener added to element:`,a)})});break;default:console.warn(`ScrollToggle: Unknown checkEvent: '${this.checkEvent}'`);}this.checkConditions()}handleEvent(a){console.log(`ScrollToggle: Event '${this.checkEvent}' triggered by:`,a.target),this.checkConditions();let b=0;const c=this.checkInterval,d=this.maxCheckDuration,e=setInterval(()=>{b+=c,console.log(`ScrollToggle: Repeated condition check after ${b}ms`),this.checkConditions(),b>=d&&(clearInterval(e),console.log("ScrollToggle: Stopped repeated condition checks after 1 second."))},c)}checkConditions(){console.log("ScrollToggle: Checking conditions...");let a=!1,b=!1;this.conditionArray.forEach((c,d)=>{const{conditionAttribute:e,conditionActive:f,conditionDisable:g}=c;console.log(`ScrollToggle: Evaluating Condition ${d+1}: Attribute='${e}', Active='${f}', Disable='${g}'`),this.conditionElements.forEach((c,d)=>{if(!c)return void console.warn(`ScrollToggle: Condition element at index ${d} is undefined.`);const h=window.getComputedStyle(c),i=h.getPropertyValue(e).trim();console.log(`ScrollToggle: Element ID='${c.id}', Attribute='${e}', Value='${i}'`),this.compareValues(i,g)?(console.log(`ScrollToggle: 'conditionDisable' met for element ID='${c.id}'. Disabling scroll.`),b=!0):this.compareValues(i,f)&&(console.log(`ScrollToggle: 'conditionActive' met for element ID='${c.id}'. Enabling scroll.`),a=!0)})}),b?(console.log("ScrollToggle: At least one disable condition met. Disabling scroll."),this.disableScroll()):a?(console.log("ScrollToggle: Active conditions met. Enabling scroll."),this.enableScroll()):console.log("ScrollToggle: No conditions met. Scroll status remains unchanged.")}compareValues(a,b){const c=parseFloat(a),d=parseFloat(b),e=c===d;return console.log(`ScrollToggle: Comparing values - Current: ${c} vs Target: ${d} -> ${e}`),e}enableScroll(){document.body.style.overflow="",console.log("ScrollToggle: Scroll enabled (document.body.style.overflow reset).")}disableScroll(){document.body.style.overflow="hidden",console.log("ScrollToggle: Scroll disabled (document.body.style.overflow set to \"hidden\").")}observeMutations(){console.log("ScrollToggle: Initializing MutationObserver for condition elements.");const a={attributes:!0,attributeFilter:this.conditionArray.map(a=>a.conditionAttribute)};this.conditionElements.forEach((b,c)=>{if(b){const c=new MutationObserver(a=>{for(let c of a)"attributes"===c.type&&(console.log(`ScrollToggle: MutationObserver detected - Attribute '${c.attributeName}' changed on element ID='${b.id}'.`),this.checkConditions())});c.observe(b,a),console.log(`ScrollToggle: MutationObserver set up for element ID='${b.id}'.`)}else console.warn(`ScrollToggle: Condition element at index ${c} is undefined. MutationObserver not set up.`)})}}})(window);