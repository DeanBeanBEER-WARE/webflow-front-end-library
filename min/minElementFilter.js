class Filter{constructor(a){this.filters=a.map((a,b)=>{try{return new FilterInstance(a)}catch(a){return console.warn(`FilterInstance ${b+1} was not added due to errors: ${a.message}`),null}}).filter(a=>null!==a)}}class FilterInstance{constructor(a){if(this.opt={buttonDuration:300,hiddenClass:"hidden",useAttributeFilter:!1,filterFunction:null,...a},!this.opt.filterTarget||!this.opt.containerClass)throw new Error("filterTarget and containerClass are required options.");if(this.elements=document.querySelectorAll(this.opt.filterTarget),this.parent=document.querySelector(this.opt.containerClass),this.currentFilter=null,!this.parent)throw new Error(`Parent container with class "${this.opt.containerClass}" was not found.`);if(this.elements.length||console.warn(`No elements found for filterTarget "${this.opt.filterTarget}".`),this.opt.useAttributeFilter){if(!this.opt.attributeName)throw new Error("attributeName must be specified when useAttributeFilter is true.");this.filterFunction=(a,b)=>{const c=a.getAttribute(this.opt.attributeName);if(!c)return!1;const d=c.split(",").map(a=>a.trim());return d.includes(b)}}else if(this.opt.filterFunction)this.filterFunction=this.opt.filterFunction;else if(this.opt.dynamicList)this.filterFunction=(a,b)=>{const c=a.querySelector(this.opt.dynamicList);if(!c)return!1;const d=c.textContent.trim();return d===b};else throw new Error("Either filterFunction or dynamicList must be specified when useAttributeFilter is false.");if(!this.opt.filters)if(this.opt.useAttributeFilter){const a=Array.from(this.elements).map(a=>a.getAttribute(this.opt.attributeName)).filter(a=>null!==a),b=[...new Set(a)];this.opt.filters=b.map(a=>({value:a}))}else if(this.opt.dynamicList){const a=document.querySelectorAll(this.opt.dynamicList),b=Array.from(a).map(a=>a.textContent.trim()).filter(a=>""!==a),c=[...new Set(b)];this.opt.filters=c.map(a=>({value:a}))}else throw new Error("Unable to generate filters without filters, attributeName, or dynamicList.");this._createButtons(),this._initFilter()}_createButtons(){this.opt.filters.forEach(a=>{const b=document.createElement("button");b.className=this.opt.buttonClass,b.textContent=a.text||a.value,b.dataset.filterValue=a.value,b.style.transition=`all ${this.opt.buttonDuration}ms ease`,b.addEventListener("click",()=>this._toggleFilter(a.value,b)),this.parent.appendChild(b)})}_initFilter(){}_toggleFilter(a,b){this.currentFilter===a?this._resetFilter():(this._applyFilter(a),this.currentFilter=a,this._updateActiveButton(b))}_applyFilter(a){this.elements.forEach(b=>{const c=this.filterFunction(b,a);b.classList.toggle(this.opt.hiddenClass,!c)})}_resetFilter(){this.elements.forEach(a=>a.classList.remove(this.opt.hiddenClass)),this.currentFilter=null,this._updateActiveButton(null)}_updateActiveButton(a){const b=this.parent.querySelectorAll(`.${this.opt.buttonClass}`);b.forEach(a=>a.classList.remove(this.opt.buttonActiveClass)),a&&a.classList.add(this.opt.buttonActiveClass)}}