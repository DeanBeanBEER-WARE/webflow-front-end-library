class Filter{constructor(t){this.filters=t.map((t,e)=>{try{return new FilterInstance(t)}catch(t){return console.warn(`FilterInstance ${e+1} was not added due to errors: ${t.message}`),null}}).filter(t=>null!==t)}}class FilterInstance{constructor(t){if(this.opt={buttonDuration:300,hiddenClass:"hidden",useAttributeFilter:!1,filterFunction:null,...t},!this.opt.filterTarget||!this.opt.containerClass)throw Error("filterTarget and containerClass are required options.");if(this.elements=document.querySelectorAll(this.opt.filterTarget),this.parent=document.querySelector(this.opt.containerClass),this.currentFilter=null,!this.parent)throw Error(`Parent container with class "${this.opt.containerClass}" was not found.`);if(!this.elements.length&&console.warn(`No elements found for filterTarget "${this.opt.filterTarget}".`),this.opt.useAttributeFilter){if(!this.opt.attributeName)throw Error("attributeName must be specified when useAttributeFilter is true.");this.filterFunction=(t,e)=>{const i=t.getAttribute(this.opt.attributeName);return!!i&&i.split(",").map(t=>t.trim()).includes(e)}}else{if(!this.opt.filterFunction&&!this.opt.dynamicList)throw Error("Either filterFunction or dynamicList must be specified when useAttributeFilter is false.");this.opt.filterFunction?this.filterFunction=this.opt.filterFunction:this.filterFunction=(t,e)=>{const i=t.querySelector(this.opt.dynamicList);return!!i&&i.textContent.trim()===e}}if(!this.opt.filters)if(this.opt.useAttributeFilter){const t=Array.from(this.elements).map(t=>t.getAttribute(this.opt.attributeName)).filter(t=>null!==t),e=[...new Set(t)];this.opt.filters=e.map(t=>({value:t}))}else if(this.opt.dynamicList){const t=document.querySelectorAll(this.opt.dynamicList),e=Array.from(t).map(t=>t.textContent.trim()).filter(t=>""!==t),i=[...new Set(e)];this.opt.filters=i.map(t=>({value:t}))}else throw Error("Unable to generate filters without filters, attributeName, or dynamicList.");this._createButtons(),this._initFilter()}_createButtons(){this.opt.filters.forEach(t=>{const e=document.createElement("button");e.className=this.opt.buttonClass,e.textContent=t.text||t.value,e.dataset.filterValue=t.value,e.style.transition=`all ${this.opt.buttonDuration}ms ease`,e.addEventListener("click",()=>this._toggleFilter(t.value,e)),this.parent.appendChild(e)})}_initFilter(){}}_toggleFilter(t,e){this.currentFilter===t?this._resetFilter():(this._applyFilter(t),this.currentFilter=t,this._updateActiveButton(e))}_applyFilter(t){this.elements.forEach(e=>{const i=this.filterFunction(e,t);e.classList.toggle(this.opt.hiddenClass,!i)})}_resetFilter(){this.elements.forEach(t=>t.classList.remove(this.opt.hiddenClass)),this.currentFilter=null,this._updateActiveButton(null)}_updateActiveButton(t){const e=this.parent.querySelectorAll(`.${this.opt.buttonClass}`);e.forEach(t=>t.classList.remove(this.opt.buttonActiveClass)),t&&t.classList.add(this.opt.buttonActiveClass)}}window.Filter=Filter,window.FilterInstance=FilterInstance;
